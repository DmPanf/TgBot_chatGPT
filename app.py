from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram.ext import CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
# from telegram import InputFile
# from telegram.error import BadRequest
from speechkit import Session, SpeechSynthesis, ShortAudioRecognition
from dotenv import load_dotenv
from io import BytesIO
import openai
import os
from functools import wraps

load_dotenv()

TOKEN = os.environ.get("TOKEN")
GPT_SECRET_KEY = os.environ.get("GPT_SECRET_KEY")
SK_TOKEN = os.environ.get("SK_TOKEN")
CATALOG_ID = os.environ.get("CATALOG_ID")
USER_LIST = os.environ.get("ADMINS")
ALLOWED_USERS = [int(user_id) for user_id in USER_LIST.split(',')]

openai.api_key = GPT_SECRET_KEY

# —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ `Session` –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É –∏ id
session = Session.from_yandex_passport_oauth_token(SK_TOKEN, CATALOG_ID)

TEXT_VOICE = 'voice'
MAN_VOICE = 'madirus'

def user_allowed(func):
    @wraps(func)
    async def wrapper(update, context):
        if update.message.from_user.id not in ALLOWED_USERS:
            txt = f'{update.message.from_user.username} <code>{update.message.from_user.id}</code>'
            await update.message.reply_text(f"{txt}\n–í—ã –Ω–µ –¥–æ–ø—É—â–µ–Ω—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...", parse_mode='HTML')
            return
        return await func(update, context)
    return wrapper

keyboard_voice = [
    [
        InlineKeyboardButton("üó£ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º", callback_data='voice'),
        InlineKeyboardButton("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", callback_data='text'),
    ],
    [
        InlineKeyboardButton("üëß –ê–ª–µ–Ω–∞", callback_data='alena'),
        InlineKeyboardButton("üßî‚Äç‚ôÇÔ∏è –§–∏–ª–∏–ø–ø", callback_data='filipp'),
        InlineKeyboardButton("üë©üèª‚Äçü¶± –î–∂–µ–π–Ω", callback_data='jane'),
        InlineKeyboardButton("üë≥üèª‚Äç‚ôÇÔ∏è –ú–∞–¥–∏—Ä—É—Å", callback_data='madirus'),
    ]
]

keyboard_text = [
    [
        InlineKeyboardButton("üó£ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º", callback_data='voice'),
        InlineKeyboardButton("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", callback_data='text'),
    ]
]

keyboard = lambda: keyboard_voice if TEXT_VOICE == 'voice' else keyboard_text

#@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def voice_command(update, context):
    reply_markup = InlineKeyboardMarkup(keyboard())
    txt = f'‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: <b>{TEXT_VOICE}</b>\nüéº –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: <b>{MAN_VOICE}</b>'
    await update.message.reply_text(txt, reply_markup=reply_markup, parse_mode='HTML')

#@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def button(update, context):
    global TEXT_VOICE, MAN_VOICE
    query = update.callback_query

    old_text_voice = TEXT_VOICE
    old_man_voice = MAN_VOICE

    if query.data in ['voice', 'text']:
        TEXT_VOICE = query.data
    else:
        MAN_VOICE = query.data

    reply_markup = InlineKeyboardMarkup(keyboard())
    if old_text_voice != TEXT_VOICE or old_man_voice != MAN_VOICE:
        txt = f'‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º: <b>{TEXT_VOICE}</b>\nüéº –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: <b>{MAN_VOICE}</b>'
        await query.edit_message_text(text=txt, reply_markup=reply_markup, parse_mode='HTML')


#@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_answer(text):
    completion = await openai.ChatCompletion.acreate(
        model="gpt-3.5-turbo-0301",
        messages=[{"role": "user", "content": text}])
    return completion.choices[0].message["content"]

@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def start(update, context):
    txt = f'\nüéº –î–ª—è —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/voice</b>'
    await update.message.reply_text(f'üì° –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å chatGPT...{txt}', parse_mode='HTML')

@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def help_command(update, context):
    txt = f'\nüé§ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∂–º–∏—Ç–µ —Å–ø—Ä–∞–≤–∞ –≤–Ω–∏–∑—É –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏...'
    txt = f'{txt}\nüéº –î–ª—è —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/voice</b>'
    await update.message.reply_text(f'üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å chatGPT –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É.{txt}', parse_mode='HTML')

@user_allowed  # –≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
async def gpt(update, context):
    user = update.message.from_user  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö user –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    if TEXT_VOICE == 'voice':
        if update.message.voice is not None:
            # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            file = await update.message.voice.get_file()
            byte_voice = await file.download_as_bytearray()
            # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            recognizeShortAudio = ShortAudioRecognition(session)
            # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            text = recognizeShortAudio.recognize(BytesIO(byte_voice), sampleRateHertz='48000')
            await update.message.reply_text(text)
        else:
            txt = '‚ÄºÔ∏è –û–∂–∏–¥–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–æ–¥ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ <b>/help</b>'
            await update.message.reply_text(txt, parse_mode='HTML')
            return
    else:
        text = update.message.text

    # –ó–∞–ø–∏—Å—å user_id –∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª
    with open("/app/data/requests.txt", "a", encoding="utf-8") as file:
        file.write(f"üî∏{user.username} [{user.id}]: üéº {text}\n")
    # print(f'\nüî∏{user.username} [{user.id}]: üéº {text}\n')
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ chatGPt
    res = await get_answer(text)

    if TEXT_VOICE == 'voice':
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞ `SpeechSynthesis`, –ø–µ—Ä–µ–¥–∞–≤–∞—è `session`
        synthesizeAudio = SpeechSynthesis(session)
        gen_voice = synthesizeAudio.synthesize_stream(text=res,
                                    voice=MAN_VOICE,  # 'madirus',
                                    speed=1.0,
                                    sampleRateHertz='48000')
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª
        file_path = "gpt_response.md"
        with open(file_path, "w", encoding="utf-8") as file:
            file.write(res)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        with open(file_path, "rb") as file:
            await update.message.reply_document(document=file)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        await update.message.reply_voice(gen_voice)
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è Markdown
        await update.message.reply_text(f'üî∞ {res}')

def main():
    application = Application.builder().token(TOKEN).build()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    application.add_handler(CommandHandler("start", start, block=False))
    application.add_handler(CommandHandler("help", help_command, block=False))
    application.add_handler(CommandHandler('voice', voice_command, block=False))
    application.add_handler(MessageHandler(filters.TEXT | filters.VOICE, gpt, block=False))
    application.add_handler(CallbackQueryHandler(button))

    # –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å Ctrl-C
    application.run_polling()

if __name__ == "__main__":
    main()
